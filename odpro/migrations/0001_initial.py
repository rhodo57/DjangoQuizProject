# Generated by Django 5.1.6 on 2025-02-15 15:58

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(blank=True, max_length=250, unique=True, verbose_name='Category')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('figure', models.ImageField(blank=True, null=True, upload_to='images/', verbose_name='Figure')),
                ('content', models.TextField(help_text='Enter the question text that you want displayed', verbose_name='Question')),
                ('explanation', models.TextField(blank=True, help_text='Explanation to be shown after the question has been answered', null=True, verbose_name='Explanation')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='odpro.category', verbose_name='Category')),
            ],
            options={
                'verbose_name': 'Question',
                'verbose_name_plural': 'Questions',
                'ordering': ['category'],
            },
        ),
        migrations.CreateModel(
            name='MCQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='odpro.question')),
                ('answer_order', models.CharField(blank=True, choices=[('content', 'Content'), ('random', 'Random'), ('none', 'None')], help_text='The order that answer options are displayed', max_length=30, null=True, verbose_name='Answer order')),
            ],
            options={
                'verbose_name': 'Multiple Choice Question',
                'verbose_name_plural': 'Multiple Choice Questions',
            },
            bases=('odpro.question',),
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=60, verbose_name='Title')),
                ('description', models.TextField(blank=True, help_text='A description of the quiz', verbose_name='Description')),
                ('url', models.SlugField(help_text='The URL of the quiz', max_length=60, unique=True, verbose_name='User friendly URL')),
                ('random_order', models.BooleanField(default=False, help_text='Whether the quiz is randomly ordered or not', verbose_name='Random order')),
                ('max_questions', models.PositiveIntegerField(blank=True, help_text='The maximum number of questions to show', null=True, verbose_name='Max questions')),
                ('answers_at_end', models.BooleanField(default=False, help_text='Show answers at end of quiz, not after each question', verbose_name='Answers at end')),
                ('exam_paper', models.BooleanField(default=False, help_text='If yes, save quiz results for scoring', verbose_name='Exam paper')),
                ('single_attempt', models.BooleanField(default=False, help_text='If yes, only one attempt permitted and non-users cannot take it', verbose_name='Single attempt')),
                ('pass_mark', models.SmallIntegerField(blank=True, default=0, help_text='Percent required to pass exam', validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)], verbose_name='Pass mark')),
                ('success_text', models.TextField(blank=True, help_text='Displayed if user passes exam', verbose_name='Success test')),
                ('fail_text', models.TextField(blank=True, help_text='Displayed if user fails exam', verbose_name='Fail text')),
                ('draft', models.BooleanField(blank=True, default=False, help_text='If yes, the quiz is not available to users', verbose_name='Draft')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='odpro.category', verbose_name='Category')),
            ],
            options={
                'verbose_name': 'Quiz',
                'verbose_name_plural': 'Quizzes',
            },
        ),
        migrations.AddField(
            model_name='question',
            name='quiz',
            field=models.ManyToManyField(blank=True, to='odpro.quiz', verbose_name='Quiz'),
        ),
        migrations.CreateModel(
            name='SubCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sub_category', models.CharField(blank=True, max_length=250, unique=True, verbose_name='Sub-Category')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='odpro.category', verbose_name='Category')),
            ],
            options={
                'verbose_name': 'Sub-Category',
                'verbose_name_plural': 'Sub-Categories',
            },
        ),
        migrations.AddField(
            model_name='question',
            name='sub_category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='odpro.subcategory', verbose_name='Sub-Category'),
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(help_text='Answer content to be displayed', max_length=1000, verbose_name='Answer content')),
                ('correct', models.BooleanField(default=False, help_text='Is this answer correct?', verbose_name='Correct')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='odpro.mcquestion', verbose_name='Question')),
            ],
            options={
                'verbose_name': 'Answer',
                'verbose_name_plural': 'Answers',
            },
        ),
    ]
